#!/usr/bin/env bash

set -e 

readonly PROGRAM=$(basename $0)
readonly VERSION='0.0.0'
readonly HOMEURL='https://github.com/vgratian/smog'

_version() {
    echo "$PROGRAM v$VERSION"
}

_usage() {
    echo "Usage: $PROGRAM command [arg] [options]"
}

_help() {
    _usage
    cat << EOF

Commands:
    list          List all local packages
    add URL       Create new package from a git URL
    remove PKG    Remove package
    show PKG      Show package metadata
    path PKG      Show path of local repository
    sync [PKG]    Check for updates in remote repositories
    update PKG    Update local repository with remote changes
    link PKG      Create symlinks for executables and ELF libs
    unlink PKG    Remove symlinks
    search KEY    Search for repositories

    version       Print version and exit
    help          Print this message

Run '$PROGRAM help COMMAND' for more details and options.

Common options:
    -m            Show more details or decorations
    -f            Ask less confirmation
    -t            Prefer tag-mode (normally the default)
    -b            Prefer branch-mode
    -T TAG        Use tag 'TAG' only
    -B BRANCH     Use branch 'BRANCH'

More documentation, report bugs or requests:
    $HOMEURL
EOF
}


# ----------------  helper functions  ----------------- #

# exit program with optional error message
abort() {
    [ -n "$1" ] && echo "$1" >&2
    exit 1
}

# ask user and read binary answer (default: no)
ask() {
    read -p "${1:-proceed?} [y/N]: "
    [ "$REPLY" == y ] || [ "$REPLY" == yes ]
}

# ----------------  command functions  ---------------- #
# prefixed with '_' to avoid confusion with bash commands

# each command has to have a help/usage function as well!

_list_help() {
    cat << EOF
Show a plain list of installed packages.

usage: smog list [-m]

options:
    -m      decorate list and add some basic info
EOF
}
_list() {
    # plain list
    [ ${OPTS[more]+_} ] || { md_list; return; }

    # decorated list (name, mode + current head, git url)
    printf "%b%-30s %-20s %s%b\n" $BOLD "package" "remote ref" "url" $CLEAR
    
    local pkg
    local -A md

    for pkg in $(md_list); do
        md=()
        md_load "$pkg"
        printf "%-30s %b%6s%b %-13s %s\n" "$pkg" $GREY "${md[mode]}" $CLEAR \
            "${md[ref]}" "${md[url]}"
    done
}

_show_help() {
    cat << EOF
Show metadata fields of a package.

usage: smog show PKG [-m]

argument:
    PKG     name of the package

options:
    -m      decorate and show more details    
EOF
}
_show() {
    md_exists "$1" || abort "package '$1' does not exist"

    # plain metadata
    [ ${OPTS[more]+_} ] || { cat "$ROOT/$MDD/$1"; return; }

    # decorated metadata
    printf "%b%-30s %s%b\n" "$BOLD" "package" "$1" "$CLEAR"

    local -A md
    local key

    md_load "$1"

    for key in ${!md[@]}; do
        printf "%-30s " "$key"
        echo "${md[$key]}"
    done

    # number of symlinks
    printf "%b%-30s %d bins and %d libs\n" "$GREY" "links" \
        $( cat "$ROOT/$MDD/$1"{.bin,.lib} 2> /dev/null | wc -l )
    printf "%b" "$CLEAR"
}

_path_help() {
    cat << EOF
Print full path of the package repository.
Useful to quickly change directory, e.g.:
    $ cd \`smog path PKG\`

usage: smog path PKG

argument:
    PKG     name of the package
EOF
}

_path() {
    md_exists "$1" || abort "package '$1' does not exist"
    echo -n "$ROOT/$PKG/"
    md_get "$1" 'path'
}

_set_help() {
    cat << EOF
Set or display metadata fields. this command is
for the advanced user, only use if you are sure
what you are doing.

usage: smog set PKG KEY[=VALUE] [-f]

arguments:
    PKG     name of the package
    KEY     metadata field key
    VALUE   metadata field value

option:
    -f      don't ask for confirmation

examples:
    * show value of 'buildcmd':
        $ smog set dwm buildcmd
    * set value of 'buildcmd':
        $ smog set dwm buildcmd='make clean && make'
EOF
}
_set() {
    local -A md
    md_load "$1" || abort "package '$1' does not exist"

    local key val
    read -r key val <<< $(echo "$2" | sed -E 's|^(\w+)=?(.*)$|\1 \2|')

    if [ -z "$val" ]; then
        echo "$key = ${md[$key]}"
        return
    fi

    # TODO: check for quotes?

    echo "$key = $val"

    if [ ! ${OPTS[force]+_} ]; then
        if [ ${md[$key]+_} ]; then
            ask "overwrite [${md[$key]}] with [$val]?" || return
        else
            ask "store value [$val]?" || return
        fi
    fi

    md["$key"]="$val"
    md_dump $1
}

_remove_help() {
    cat << EOF
Remove package, i.e. delete repository, metadata
and links.

usage: smog remove PKG [-f]

arguments:
    PKG     name of the package

option:
    -f      don't ask for confirmation
EOF
}
_remove() {
    local -A md
    md_load "$1" || abort "package '$1' does not exist"
   
    local path="${md[path]}" 
    [ -d "$ROOT/$PKG/$path" ] || abort "invalid path '$path'"

    if [ ! ${OPTS[force]+_} ]; then
        echo "warning: any local changes will be permanently lost"
        ask "remove '$1'?" || exit
    fi

    if md_links_exist "$1"; then
        local -A bin lib
        echo "cleaning up symlinks.."

        if md_links_load "$1" bin; then
            links_remove bin "$ROOT/$BIN" "$ROOT/$PKG/$path"
            links_clean bin "$ROOT/$BIN" "$ROOT/$PKG/$path"
        fi

        if md_links_load "$1" lib; then
            links_remove lib "$ROOT/$LIB" "$path"
            links_clean lib "$ROOT/$LIB" "$path"
        fi

        md_links_remove "$1"
    fi

    rm -rf "$ROOT/$PKG/$path" || abort
	echo "removed repository '$path'"

    # remove empty parent directories
    while path=$( dirname "$path"); do
        [ -z "$path" ] || [ "$path" == "." ] && break
        [ $( ls -A "$ROOT/$PKG/$path" | wc -l ) -ne 0 ] && break
        rm -vd "$ROOT/$PKG/$path" || abort
    done

    md_remove "$1"
    echo -e "${BOLD}package '$1' removed${CLEAR}"
}

_check_help() {
    cat << EOF
Check if a package can be added for the given git URL,
this command is for debugging, and might be removed
in the future.

usage: smog check URL [-ftb] [-T TAG] [-B BRANCH] 

See 'smog add' for arguments and options.
EOF
}

_check() {
    local pkg path url="$1"

    url_parse "$url" || abort "failed to parse the URL"

    printf "\n"
    printf "%-10s %s\n" "package:" "$pkg"
    printf "%-10s %s\n" "url:" "$url"
    printf "%-10s %s\n" "path:" "$path"
    printf "\n"

    local -A refs
	local -a refsarr
    local mode ref refname sha

	check_refs || abort

    for r in "${refsarr[@]}"; do echo "  * $r"; done
}

_add_help() {
    cat << EOF
Create a smog package for the given git URL,
i.e. clone repository and create metadata file.

usage: smog add URL [-ftb] [-T TAG] [-B BRANCH] 

argument:
    URL     a valid git URL

options:
    -f          don't ask for confirmation
    -t          add package in tag-mode
    -b          add package in branch-mode
    -T TAG      use specifically tag TAG
    -B BRANCH   use specifically branch BRANCH

    -r          clone submodules as well: this is
                an experimental option, use at your
                own risk!

If no preference is given, smog will try first to
clone a tag, and only if no tags are available,
suggest to clone a branch.
EOF
}
_add() {

    local pkg path url="$1"

    url_parse "$url" || abort "failed to parse the URL"

    printf "\n"
    printf "%-10s %s\n" "package:" "$pkg"
    printf "%-10s %s\n" "url:" "$url"
    printf "%-10s %s\n" "path:" "$path"
    printf "\n"

    if [ ! ${OPTS[force]+_} ]; then
        ask 'proceed?' && echo || exit
    fi

    local -A md
    md[url]=$url

    # Warn if URL used for another package
    local used=$(grep -l "^url: ${url}$" "$ROOT/$MDD/*")
    if [ -n "$used" ]; then
        echo "URL already used by package '`basename $used`'"
        # ask 'continue anyway?' || exit
        # TODO: need to handle conflicting paths
        abort
    fi

    # Check that pkg name is not already used. It's OK to
    # have two git repositories with the same name, but in
    # our metadata each package name should be unique.
    while md_exists "$pkg"; do
        echo -en "a package $BOLD'$pkg'$CLEAR already exists, "
        echo "you can use an alternative name"
        read -p "use name: " pkg
		[ -n "$pkg" ] || abort
        echo
    done

    md[path]="$path"

	# check available tags/branches and which
	# ref we will use to clone the repo
    local -A refs
	local -a refsarr
    local mode ref refname sha

	check_refs || abort

    # ask to confirm selected tag/branch (if any)
    if [ -n "$ref" ] && [ "$ref" != "${OPTS[$mode]}" ]; then
        ask "use $mode [$ref]?" || ref=
    fi

    # ask to choose tag/branch if nothing is selected
    # TODO: don't ask if 1 ref and user already declined
    if [ -z "$ref" ]; then
        echo "choose $mode to clone"
        select ref in "${refsarr[@]}"; do break; done
    fi
        
    [ -n "$ref" ] && [ ${refs[$ref]+_} ] || abort

    md[mode]=$mode
    md[ref]=$ref
    # SHA only relevant for branches
    [ "$mode" == branch ] && md[sha]=${refs[$ref]}

    echo
    echo -e "${BOLD}selected $mode [$ref] ${CLEAR}"

	# Clone repo into the package's path
	mkdir -vp "$ROOT/$PKG/$path" || abort
	cd "$ROOT/$PKG/$path"

	echo -en "$GREY"
	$GIT clone --depth=1 -c advice.detachedHead=false -b "$ref" "$url" "$ROOT/$PKG/$path"
	[ $? -ne 0 ] && rm -rf "$ROOT/$PKG/$path" && abort
    echo -en "$CLEAR"

    # Check if repo has submodules
    if [ -e '.gitmodules' ]; then
        if [ ! ${OPTS[recurse]+_} ]; then
            echo "repository appears to have submodules"
            ask 'clone submodules as well?' && OPTS[recurse]=
        fi
        if [ ${OPTS[recurse]+_} ]; then
            md[submodules]=yes
            echo
            echo -e "cloning submodules..$GREY"
            $GIT submodule update --depth=1 --init --recursive
            echo -en "$CLEAR"
        fi
    fi

    echo -en "$GREY"
	$GIT checkout -b "${LOCALBRANCH}" 
	[ $? -ne 0 ] && rm -rf "$ROOT/$PKG/$path" && abort
	echo -en "$CLEAR"

    md_dump "$pkg"
    echo -e "${BOLD}package '$pkg' created${CLEAR}"
}

_sync_help() {
    cat << EOF
Sync package(s) with upstream repository and list
package(s) for which updates are available.

With no argument, all packages are synced, otherwise
only the named package.

usage: smog sync [PKG] [-m] 

argument:
    PKG     only sync package PKG

options:
    -m      list all packages and show detailed
            status (by default only updatable
            package are listed with no info)    

metadata:
    tag_pattern: (tag-mode) only consider matching tags 
EOF
}
_sync() {

    if [ ${OPTS[more]+_} ] && [ ! ${OPTS[no_header]+_} ]; then
        printf "%b%-30s %-20s %s%b\n" $BOLD "package" "remote ref" "status" $CLEAR
    fi

    # Sync single package and exit
    [ -n "$1" ] && sync_pkg "$1" && return

    # Sync all packages - run 'smog PKG -n' for each package
    # (-n will prevent printing header each time)
    [ ${OPTS[more]+_} ] && flags="-nm" || flags="-n"
    md_list | xargs -P ${NPROCS} -I {} $0 sync "$flags" {}
    wait
    [ ${OPTS[more]+_} ] && printf "\nsyncing complete!\n"
}

_update_help() {
    cat << EOF
Update local repository with upstream.

usage: smog update PKG [-f] [-T TAG]

argument:
    PKG         package to update

options:
    -f          don't ask for confirmation to commit
                unstaged local changes
    -T TAG      (tag-mode) update to tag TAG

metadata:
    tag_pattern: (tag-mode) only consider matching tags 

The local repository is updated in three steps:
    1. if there are unstaged changes in '\$LOCALBRANCH',
    commit those changes
    2. fetch updates (in branch mode: the latest commits,
    in tag mode: a more recent tag)
    3. merge updates into '\$LOCALBRANCH'
EOF
}
_update() {
    local -A md
    md_load "$1" || abort "package '$1' does not exist"

    local status ref
    local -a refsarr
    local -A refs

    echo -n "checking for updates.. "

    set +e # temporary solution to bash nightmare

    if [ "${md[mode]}" == branch ]; then
        sync_branch "${md[url]}" "${md[ref]}" "${md[sha]}"
    elif [ "${md[mode]}" == tag ]; then
        sync_tag "${md[url]}" "${md[ref]}" "${md[tag_pattern]-}"
    else
        abort "invalid mode '${md[mode]}'"
    fi

    case $? in 
        0 ) echo "package is up-to-date"; return ;;
        1 | 2 ) echo -e "${BOLD}${status}${CLEAR}" ;;
        * ) abort "$status" ;;
    esac
    set -e

    # If we get here, updates are available.
    # For branch mode, we just need to update local branch
    # For tag mode, multiple new tags ('releases') might
    # be avaiable, so we ask user which to choose.
    if [ "${md[mode]}" == tag ]; then
        check_tags || abort 'terminated'
    fi

    # Enter package directory
    echo "entering directory '${md[path]}'"
    cd "$ROOT/$PKG/${md[path]}" || abort
    $GIT checkout -q "$LOCALBRANCH" || abort

    # Before fetching remote changes, make sure our
    # local branch does not have uncommitted commits.
    echo -n "checking local changes in '$LOCALBRANCH'.. "
    if [ -z "$($GIT status -s)" ]; then
        echo "OK: clean branch"
    else
        echo
        echo "you have $($GIT status -s | wc -l) unstaged or uncommited changes"
        ask "create autocommit?" || abort
        echo -en "$GREY"
        # TODO: something better than 'add .'
        $GIT add . || abort
        $GIT commit -m "autocommit by $PROGRAM" || abort
        echo -en "$CLEAR"
    fi

    # Fetch remote changes
    echo -en "$GREY"
    if [ "${md[mode]}" == tag ]; then
        $GIT fetch origin tag "$ref" || abort
        $GIT merge -m "automerge by $PROGRAM" "$ref" || abort
        md[ref]="$ref"
    else 
        $GIT fetch origin "$ref" || abort
        md[sha]=$( $GIT log origin/"${md[ref]}" -1 --pretty=format:%H )
        $GIT merge -m "automerge by $PROGRAM" origin/"$ref" || abort
    fi
    echo -en "$CLEAR"

    # Update submodules
    # TODO: experimental, needs testing
    # TODO: warn that we don't take care of local changes in submodules
    if [ ${md[submodules]+_} ]; then
        echo -e "updating submodules..$GREY"
        $GIT submodule update --init --recursive
        echo -en "$CLEAR"
    fi

    md_dump "$1"

    echo -en "${BOLD}package '$1' updated to "
    if [ "${md[mode]}" == tag ]; then
        echo "tag '$ref'"
    else
        echo "remote branch '$ref' [$sha]"
    fi
    echo -en "$CLEAR"
}

_link_help() {
    cat << EOF
Create symlinks for executables and sharedlibs. This
is done by first scanning the root directory of the
package repository. Links are created in the two
directories \$BIN and \$LIB.

If more than one executable or sharedlib is detected,
there is the option to edit the list.

usage: smog link PKG [-r] [-R DIR]

argument:
    PKG         package name

options:
    -r          scan recursively in all subdirectories
    -R DIR      use DIR instead the root directory of
                repository (must be a subdirectory)

metadata:
    builddir    has the same effect as '-R DIR'
EOF
}
_link() {
    local -A md
    md_load "$1" || abort "package '$1' does not exist"

    if [ -z "$BIN" ] && [ -z "$LIB" ]; then
        echo 'variables $BIN and $LIB not set in config'
        abort
    fi

    # --- Prepare --- #

    # Root directory of the package.
    local path="$ROOT/$PKG/${md[path]}"

    # User flag '-R' or metadata field 'builddir' tell
    # us to scan only a subdirectory.
    local dir
    if [ ${OPTS[root]+_} ]; then
        dir="${OPTS[root]}"
    elif [ ${md[builddir]+_} ]; then
        dir="${md[builddir]}"
    fi
    [ "${dir: -1}" == / ] && dir="${dir::-1}" # strip trailing '/'

    # sanity check
    [ -d "$path/$dir" ] || abort "path '$path/$dir' does not exist"
    [ -L "$path/$dir" ] && abort "path '$path/$dir' is a symlink"

    # Each of these two AA's shall contain target file as
    # key and linkname as value. Target file is the relative
    # path of the file in the 'root' directory.
    local -A bin lib

    # If package already has links, mark our action as 'update'.
    # This means we can expect that some links already exists
    # and we will check for dead links.
    local update recursive
    if md_links_exist "$1"; then
        update=update
        # Load existing links, otherwise we might try to
        # re-create the same link (e.g. with different linkname)
        [ -n "$BIN" ] && md_links_load "$1" bin
        [ -n "$LIB" ] && md_links_load "$1" lib
    fi

    # --- Scan for targets --- #

    echo "scanning '$path/$dir'"
    [ ${OPTS[recurse]+_} ] && recursive=r
    links_scan "$path" "$dir" $recursive
    echo "detected ${#bin[@]} executables and ${#lib[@]} libraries"

    # if nothing detected, we're done here
    [ ${#bin[@]} -eq 0 ] && [ ${#lib[@]} -eq 0 ] && exit

    # It's possible that we detect a lot of executables
    # (e.g. build or test scripts) that would create garbage
    # symlinks, so give user option to filter the lists.
    if [ ${#bin[@]} -gt 1 ] || [ ${#lib[@]} -gt 1 ]; then
        ask "open list in editor?" && links_edit "$path" bin lib
    fi

    ask "${update-create} symlinks?" || exit

    # --- Create links --- #

    local -i created=0 cleaned=0 conflicts=0 skipped=0

    printf "\n%b" $BOLD
    printf "%-25s %-25s %s\n" 'Action' 'Linkname' 'Target'
    printf "%b" $CLEAR

    # create links for executables
    if [ ${#bin[@]} -ne 0 ]; then
        if [ -z "$BIN" ]; then
            echo 'variable $BIN not set, skipping executable targets'
        else
            [ -d "$ROOT/$BIN" ] || abort "directory '$ROOT/$BIN' does not exist"
            [ -n "$update" ] && links_clean bin "$ROOT/$BIN" "$path"
            links_create bin "$ROOT/$BIN" "$path"
            md_links_dump "$1" bin > /dev/null
       fi
    fi

    # create links for sharedlibs
    if [ ${#lib[@]} -ne 0 ]; then
        if [ -z "$LIB" ]; then
            echo 'variable $LIB not set, skipping sharedlibs'
        else
            [ -d "$ROOT/$LIB" ] || abort "directory '$ROOT/$LIB' does not exist"
            [ -n "$update" ] && links_clean lib "$ROOT/$LIB" "$path"
            links_create lib "$ROOT/$LIB" "$path"
            md_links_dump "$1" lib > /dev/null
        fi
    fi
    
    # Report results
    echo -e $BOLD
    echo -n "$created created, $skipped skipped, "
    echo "$cleaned cleaned, $conflicts conflicts."
    echo -en $CLEAR
}

_unlink_help() {
    cat << EOF
Unlink and remove symlinks of a package.

usage: smog unlink PKG

argument:
    PKG         package name
EOF
}
_unlink() {
    local -A md
    md_load "$1" || abort "package '$1' does not exist"
    md_links_exist "$1" || abort "package '$1' has no links"

    local path="$ROOT/$PKG/${md[path]}"
    local -A bin lib
    local -i removed=0 skipped=0 cleaned=0

    printf "\n%b" $BOLD
    printf "%-25s %-25s %s\n" 'Action' 'Linkname' 'Target'
    printf "%b" $CLEAR
   
    if [ -n "$BIN" ] && md_links_load "$1" bin; then
        links_remove bin "$ROOT/$BIN" "$path"
        links_clean bin "$ROOT/$BIN" "$path"
    fi

    if [ -n "$LIB" ] && md_links_load "$1" lib; then
        links_remove lib "$ROOT/$LIB" "$path"
        links_clean lib "$ROOT/$LIB" "$path"
    fi

    # Report results
    echo -e $BOLD
    echo "$removed removed, $cleaned cleaned, $skipped skipped."
    echo -en $CLEAR

    # TODO: don't remove if links were not removed
    md_links_remove "$1"
}

_build_help() {
    cat << EOF
Runs the 'buildcmd' as defined in metadata of package.
Set this manually with 'smog set PKG buildcmd=dostuff'.

Command is executed in the root directory of package
unless the metadata field 'builddir' or the option '-R'
is provided.

Experimental feature, use at your own risk.

usage: smog build PKG [-R DIR]

argument:
    PKG         package name

options:
    -R [DIR]    run command in subdirectory DIR

metadata:
    buildcmd    string representing simple bash
                command or execution of bash script

                examples:

                'make all'
                'gcc example.c -o example'
                './build.sh'
EOF
}
_build() {
    md_exists "$1" || abort "package '$1' does not exist"
    local buildcmd=$(md_get $1 'buildcmd')

    if [ -z "$buildcmd" ]; then
        abort "'buildcmd' not defined in metadata"
    fi

    local pkgpath=$(md_get "$1" 'path')
    local subdir=

    if [ ${OPTS[root]+_} ]; then
        subdir="${OPTS[root]}"
    else
        subdir=$(md_get $1 'builddir')
    fi

    local fullpath="$PKG/$pkgpath/$subdir"

    cd "$ROOT/$fullpath"
    echo "changed directory '$fullpath'"

    ask "execute '$buildcmd'?" && $buildcmd
}

_upgrade_help() {
    cat << EOF
Shorthand command equa to 'smog update PKG &&
smog build PKG'.

usage: smog upgrade PKG [-f] [-T TAG] [-R DIR]
EOF
}

_upgrade() {
    _update "$1" && _build "$1"
}

_search_help() {
    cat << EOF
Search for packages in remote repositories.

Note: this is an experimental feature and currently
only shows results from github.com (with max 10
queries per minute). 

usage: smog search QUERY

argument:
    QUERY       keyword to search for

options:
    -S          sort by, one of:
                    stars
                    forks
                    help-wanted-issues
                    default: best match
    -L          language (e.g. go, python, c)
    -N          number of results to show (max 100)

reference:
    https://docs.github.com/en/rest/search#search-repositories
    https://docs.github.com/en/search-github/searching-on-github/searching-for-repositories
EOF
}

_search() {
    local url header
    header="Accept: application/vnd.github.v3+json"
    url="https://api.github.com/search/repositories?q=${1}"
    [ -n "${OPTS[lang]}" ] && url+="+language:${OPTS[lang]}"
    [ -n "${OPTS[sort]}" ] && url+="&sort=${OPTS[sort]}"
    url+="&order=desc"
    [ -n "${OPTS[num]}" ] && url+="&per_page=${OPTS[num]}"

    local -i num=0
	local line val

	while read -r line; do
		case $(echo "$line" | cut -sd: -f1 | tr -d '[:space:]"') in
			'full_name' )
				((num+=1))
				val=$(echo "$line" | cut -sd: -f2- | sed -E 's/^\s*"(.+)",?$/\1/')
				printf '\n%b%s%b\n' $BOLD "$val" $CLEAR ;;
			'clone_url' | 'description' )
				val=$(echo "$line" | cut -sd: -f2- | sed -E 's/^\s*"(.+)",$/\1/')
				[ -n "$val" ] && printf '\t%s\n' "$val" ;;
		esac
	done <<< $( curl -# -H "$header" "$url" )

	if [ $num -gt 0 ]; then
		printf "\nshowed %d results from 'github.com'\n" $num
	fi
}

# ---- main routine ---- #

# reject to run as root user
if [ "$EUID" -eq 0 ] || [ "$(id -u 2>/dev/null)" -eq 0 ]; then
    abort "please don't run $PROGRAM as root"
fi

# figure out home directory and import config
if [ -L "$0" ]; then
    confp=$(dirname $(readlink $0))/config
else
    confp=$(dirname $0)/config
fi

. $confp
unset confp

# import utils
for u in color md url git sync link; do
    . $ROOT/$SMOG/util/$u
done

# check for commands that need no further work 
case $1 in
    -h | --help | help ) ${2:+_$2}_help && exit 0 || abort ;;
    -v | --version | version ) _version && exit 0 ;;
    * ) [ -z "$1" ] && _usage && abort 'error: missing command' ;;
esac

declare -a ARGS
declare -A OPTS
declare CMD=$1
shift

# it would have been easier to use getopts, but I needed need more flexibility
# rules for parsing options and arguments:
#   - boolean options are lowercased and can be combined (e.g. '-ft')
#   - options with argument are uppercased, can be only combined as last option (e.g. '-fB master')
#   - anything else (at any position) is argument to CMD
declare opt arg buf

while [ $# -gt 0 ]; do

    # --- parse argument --- #
    opt=
    arg=
    [ -z "$buf" ] && buf="$1"

    if [ "${buf::1}" == - ]; then
        opt="${buf:1:1}"
        if [ -n "${buf:2}" ]; then
            buf="-${buf:2}"
        else
            [ "$buf" == "${buf^^}" ] && shift && arg="$1"
            shift
            buf=
        fi
    else
        arg="$buf"
        buf=
        shift
    fi

    # --- handle argument --- #
    [ -z "$opt" ] && ARGS+=("$arg") && continue

    # --- handle option   --- #
    case $opt in
        t ) OPTS[mode]=tag ;;
        b ) OPTS[mode]=branch ;;
        n ) OPTS[no_header]= ;;
        r ) OPTS[recurse]= ;;
        f ) OPTS[force]= ;;
        m ) OPTS[more]= ;;
        T ) [ -n "$arg" ] && OPTS[tag]="$arg" ||    abort "option '-$opt' requires argument" ;;
        B ) [ -n "$arg" ] && OPTS[branch]="$arg" || abort "option '-$opt' requires argument" ;;
        R ) [ -n "$arg" ] && OPTS[root]="$arg" ||   abort "option '-$opt' requires argument" ;;
        S ) [ -n "$arg" ] && OPTS[sort]="$arg" ||   abort "option '-$opt' requires argument" ;;
        L ) [ -n "$arg" ] && OPTS[lang]="$arg" ||   abort "option '-$opt' requires argument" ;;
        N ) [ -n "$arg" ] && OPTS[num]="$arg"  ||   abort "option '-$opt' requires argument" ;;
        * ) abort "invalid option '-$opt'"
    esac
done

unset opt arg buf

# check that command has required number of arguments
case $CMD in
    add | check )
        [ ${#ARGS[@]} -ne 1 ] && abort "$CMD: requires 1 argument <URL>" ;;
    remove | show | path | update | link | unlink | build | upgrade )
        [ ${#ARGS[@]} -ne 1 ] && abort "$CMD: requires 1 argument <PKG>" ;;
    search )
        [ ${#ARGS[@]} -ne 1 ] && abort "$CMD: requires 1 argument <KEY>" ;;
    sync )
        [ ! ${#ARGS[@]} -le 1 ] && abort "$CMD: has optional argument <PKG>" ;;
    list )
        [ ${#ARGS[@]} -ne 0 ] && abort "$CMD: requires no argument" ;;
    set )
        [ ${#ARGS[@]} -ne 2 ] && abort "$CMD: requires 2 arguments <PKG> <KEY>" ;;
    * ) abort "invalid command '$CMD'" ;;
esac

# lock metadata
case $CMD in
    add | remove | update | link | unlink | set )
        md_lock && trap 'md_unlock' EXIT || abort "error: metadata locked" ;;
esac

_$CMD "${ARGS[@]}"
